//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------
namespace BeautySalon.Model
{
    using BeautySalon.Model;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ClientService
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public ClientService()
        {
            this.DocumentByService = new HashSet<DocumentByService>();
            this.ProductSale = new HashSet<ProductSale>();
        }

        public int ID { get; set; }
        public int ClientID { get; set; }
        public int ServiceID { get; set; }
        public System.DateTime StartTime { get; set; }
        public string Comment { get; set; }

        public virtual Client Client { get; set; }
        public virtual Service Service { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<DocumentByService> DocumentByService { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductSale> ProductSale { get; set; }

        public string Name
        {
            get
            {
                var ServiceName = barhatnie_brovkiEntities.GetContext().Service.Where(p => p.ID == this.ServiceID).FirstOrDefault();
                return ServiceName.Title;
            }
        }

        public string Sum
        {
            get
            {
                var ServiceName = barhatnie_brovkiEntities.GetContext().Service.Where(p => p.ID == this.ServiceID).FirstOrDefault();

                if (ServiceName.Discount == 0)
                {
                    Decimal ServiceCost = Convert.ToDecimal(ServiceName.Cost);
                    int ServiceIntCost = Convert.ToInt32(ServiceCost);
                    return Convert.ToString(ServiceIntCost) + " рублей за ";
                }
                else
                {
                    Decimal ServiceCost = Convert.ToDecimal(ServiceName.Cost);
                    int ServiceIntCost = Convert.ToInt32(ServiceCost);
                    return Convert.ToString(ServiceCost) + " ";
                }





            }

        }
        public string NewSum
        {
            get
            {
                var ServiceName = barhatnie_brovkiEntities.GetContext().Service.Where(p => p.ID == this.ServiceID).FirstOrDefault();

                if (ServiceName.Discount != 0)
                {
                    Decimal ServiceCost = Convert.ToDecimal(ServiceName.Cost);
                    Decimal ServiceDiscount = Convert.ToDecimal(ServiceName.Discount);
                    Decimal ServiceDiscountPer = ServiceDiscount * 100;


                    Decimal ServiceNewCost = (ServiceCost * ServiceDiscountPer) / 100;
                    Decimal ServiceFinalCost = ServiceCost - ServiceNewCost;

                    int ServiceIntCost = Convert.ToInt32(ServiceFinalCost);
                    return Convert.ToString(ServiceIntCost) + " рублей за ";
                }
                else
                {

                    return " ";
                }





            }



        }

        public string Decorate
        {
            get
            {
                var ServiceName = barhatnie_brovkiEntities.GetContext().Service.Where(p => p.ID == this.ServiceID).FirstOrDefault();

                if (ServiceName.Discount == 0)
                {
                    return "";
                }
                else
                {

                    return "Strikethrough";
                }





            }


        }

        public string Time
        {
            get
            {
                var ServiceName = barhatnie_brovkiEntities.GetContext().Service.Where(p => p.ID == this.ServiceID).FirstOrDefault();


                Decimal ServiceTime = Convert.ToDecimal(ServiceName.DurationInSeconds);
                Decimal ServiceIntCost = ServiceTime / 60;
                return Convert.ToString(ServiceIntCost) + " минут";




            }

        }

        public string Discount
        {
            get
            {
                var ServiceName = barhatnie_brovkiEntities.GetContext().Service.Where(p => p.ID == this.ServiceID).FirstOrDefault();


                if (ServiceName.Discount != 0)
                {
                    return "* скидка " + Convert.ToString(ServiceName.Discount * 100) + "%";
                }
                else
                {
                    return "";
                }





            }

        }

        public string ImgPath
        {
            get
            {
                var ServiceName = barhatnie_brovkiEntities.GetContext().Service.Where(p => p.ID == this.ServiceID).FirstOrDefault();



                return "\\Resources\\" + ServiceName.MainImagePath;





            }

        }
    }
}